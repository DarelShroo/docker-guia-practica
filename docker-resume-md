## Docker Containers:

### Básicos:
- **docker container –help**: Muestra ayuda para comandos relacionados con contenedores.
- **docker container ls -a**: Lista todos los contenedores, incluidos los detenidos.
- **docker ps**: Muestra contenedores en ejecución. Similar a `docker container ls` pero solo para los que están corriendo.
- **docker container start**: Inicia un contenedor detenido.

### Ejecución y Configuración:
- **docker container run -d**: Ejecuta un contenedor en modo 'detached' (en segundo plano).
- **docker container run -dp 1080:80 docker/getting-started**: Ejecuta en segundo plano, mapea puerto 1080 del host al 80 del contenedor y utiliza la imagen `docker/getting-started`.
- **docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres**: Ejecuta contenedor con nombre "some-postgres", establece variable de entorno para contraseña y utiliza imagen "postgres".

### Gestión:
- **docker container rm ID o shortcutID o nombre**: Elimina un contenedor específico.
- **docker container prune**: Elimina todos los contenedores detenidos.
## Docker Imágenes:

- **docker image ls**: Lista todas las imágenes disponibles localmente.
- **docker image rm 92034fe9a41f**: Elimina la imagen con ID `92034fe9a41f`.

### Repositorios:
- **Imágenes de docker → docker hub**: Referencia al Docker Hub, repositorio en línea para encontrar, compartir y gestionar imágenes.

### Comandos específicos:
```bash
docker container run \
--name world-db \
--env MARIADB_USER=psych \
--env MARIADB_PASSWORD=mypassword \
--env MARIADB_ROOT_PASSWORD=mypassword \
--env MARIADB_DATABASE=world-db \
--volume world-db:/var/lib/mysql \
-dp 4306:3306 \
--network world-app \
mariadb:jammy
```

```bash
docker container run \
--name phpmyadmin \
-d \
-e PMA_ARBITRARY=1 \
-p 8090:80 \
--network world-app \
phpmyadmin:5.2.0
```

```bash
docker container run \
--name nest-app \
-w /app \
-dp 90:3000 \
-v "$(pwd)":/app \
node:16-alpine3.16 \
sh -c "yarn install && yarn start:dev"
```

- **docker logs -f fa1**: Sigue los logs en tiempo real del contenedor con ID `fa1`.

##Docker Compose
```bash
version: '3'

services:
  db: 
    container_name: pokemon_db
    image: mongo:6.0
    volumes:
      - poke-vol:/data/db
    ports:
      - 27017:27017
    retart: always

volumes:
  poke-vol:
    external: true
```

```bash
version: '3'

services:
  db: 
    container_name: ${MONGO_DB_NAME}
    image: mongo:6.0
    volumes:
      - poke-vol:/data/db
    #ports:
      #- 27017:27017
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    command: ['--auth']
  mongo-express: 
    depends_on:
      - db
    image: mongo-express:1.0.0-alpha.4
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_DB_NAME}
    ports:
      - 9090:8081
    restart: always

volumes:
  poke-vol:
    external: false
```

``` bash
docker buildx create --name mybuilder --driver docker-container --bootstrap
docker buildx use mybuilder
docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8 \
-t psych30/cron-ticker:latest --push .

docker buildx imagetools inspect psych30/cron-ticker:latest```
